; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\..\..\..\..\PIEMAN~1\DESKTOP\CECDEV\TICTAC~1\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_xx:
	DW	10
	DB	0
_xy:
	DW	20
	DB	0
_ox:
	DW	40
	DB	0
_oy:
	DW	40
	DB	0
_cursorx:
	DW	86
	DB	0
	SEGMENT BSS
_previous_cursorx:
	DS	3
	SEGMENT DATA
_cursory:
	DW	51
	DB	0
	SEGMENT BSS
_previous_cursory:
	DS	3
	SEGMENT DATA
_cursor_step:
	DW	50
	DB	0
_player:
	DW	1
	DB	0
_element:
	DW	0
	DB	0
_test_element:
	DW	0
	DB	0
_test_result:
	DW	0
	DB	0
_clear:
	DW	0
	DB	0
	SEGMENT BSS
_effectx:
	DS	3
_effecty:
	DS	3
_value:
	DS	3
	SEGMENT STRSECT
L__0:
	DB	"Tic Tac Toe 2P v1.0"
	DB	0
	SEGMENT DATA
_version:
	DW24	L__0
_winner:
	DW	0
	DB	0
	SEGMENT STRSECT
L__1:
	DB	"X Wins!!!!!"
	DB	0
	SEGMENT DATA
_xwins:
	DW24	L__1
	SEGMENT STRSECT
L__2:
	DB	"O Wins!!!!!"
	DB	0
	SEGMENT DATA
_owins:
	DW24	L__2
	SEGMENT STRSECT
L__3:
	DB	"It's a tie!!!"
	DB	0
	SEGMENT DATA
_catsgame:
	DW24	L__3
_board:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_coord:
	DW	27571
	DB	0
	DW	43571
	DB	0
	DW	59571
	DB	0
	DW	27621
	DB	0
	DW	43621
	DB	0
	DW	59621
	DB	0
	DW	27671
	DB	0
	DW	43671
	DB	0
	DW	59671
	DB	0
	SEGMENT BSS
_buf:
	DS	12
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name:Tic tac toe
;    4	 * Author: Pieman7373
;    5	 * License:
;    6	 * Description:
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	#include <math.h>
;   17	#include <setjmp.h>
;   18	#include <stdio.h>
;   19	#include <stdlib.h>
;   20	#include <string.h>
;   21	#include <graphx.h>
;   22	#include <keypadc.h>
;   23	
;   24	#define FONT_HEIGHT 8
;   25	
;   26	#include "gfx/tictacgfx.h"
;   27	/* Put your function prototypes here */
;   28	void keywait();
;   29	void resetvars();
;   30	void winscreen();
;   31	/* Put all your globals here */
;   32	
;   33	/* Fill in the body of the main function here */
;   34		
;   35		int xx = 10;
;   36		int  xy = 20;
;   37		int  ox = 40;
;   38		int  oy = 40;
;   39		int  cursorx = 86;
;   40		int previous_cursorx;
;   41		int  cursory = 51;
;   42		int previous_cursory;
;   43		int cursor_step = 50;
;   44		int player = 1;
;   45		int element = 0;
;   46		int test_element = 0;
;   47		int test_result = 0;
;   48		int clear = 0;
;   49		int effectx;
;   50		int effecty;
;   51		int value;
;   52		const char *version = "Tic Tac Toe 2P v1.0";
;   53		int winner = 0;
;   54		const char *xwins = "X Wins!!!!!";
;   55		const char *owins = "O Wins!!!!!";
;   56		const char *catsgame = "It's a tie!!!";
;   57		
;   58		//initalize board array (i think)
;   59		uint8_t board [9] = {0,0,0,0,0,0,0,0,0};
;   60		int coord [9] = {27571,43571,59571,27621,43621,59621,27671,43671,59671};
;   61		
;   62		static jmp_buf buf;
	SEGMENT CODE
;   63		
;   64	void main(void) {	
_main:
	LD	HL,-107
	CALL	__frameset
;   65		
;   66		kb_key_t key;
;   67		
;   68		setjmp(buf);
	LD	BC,_buf
	PUSH	BC
	CALL	_setjmp
	POP	BC
;   69		
;   70	
;   71		gfx_SetPalette(tictacgfx_pal, sizeof_tictacgfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	BC,_tictacgfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   72		gfx_Begin();
	CALL	_gfx_Begin
;   73		gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;   74		gfx_FillScreen(0xFF);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   75		gfx_SetColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   76		gfx_SetTransparentColor(0xFF);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;   77		gfx_SetTextFGColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   78		gfx_SetTextBGColor(0xFF);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   79		gfx_PrintStringXY(version,2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,(_version)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   80		gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;   81		gfx_PrintStringXY("< ^ v > = Move",2,20);
	LD	BC,20
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,L__4
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   82		gfx_PrintStringXY("[2nd] = Place Piece",2,30);
	LD	BC,30
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   83		gfx_PrintStringXY("[Clear] = Quit",2,40);
	LD	BC,40
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   84		gfx_PrintStringXY("By: Pieman7373 2018",2,232);
	LD	BC,232
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   85		
;   86		/*Draw board*/
;   87			gfx_Line(135,50,135,200);
	LD	BC,200
	PUSH	BC
	LD	BC,135
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	BC,135
	PUSH	BC
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   88			gfx_Line(85,100,235,100);
	LD	BC,100
	PUSH	BC
	LD	BC,235
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,85
	PUSH	BC
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   89			gfx_Line(85,150,235,150);
	LD	BC,150
	PUSH	BC
	LD	BC,235
	PUSH	BC
	LD	BC,150
	PUSH	BC
	LD	BC,85
	PUSH	BC
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   90			gfx_Line(185,50,185,200);
	LD	BC,200
	PUSH	BC
	LD	BC,185
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	BC,185
	PUSH	BC
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   91		
;   92		
;   93		
;   94			
;   95		do {
L_100:
;   96			
;   97			/*print winner for debug
;   98			gfx_FillRectangle(2,10,20,20);
;   99			gfx_SetTextXY(2,20);
;  100			gfx_PrintInt(winner,1);
;  101			*/
;  102			
;  103			/*print cursor coords for debug
;  104			gfx_SetTextXY(2,20);
;  105			gfx_PrintInt(cursorx,3);
;  106			gfx_SetTextXY(2,30);
;  107			gfx_PrintInt(cursory,3);
;  108			gfx_SetTextXY(2,40);
;  109			gfx_PrintInt(player,1);
;  110			*/	
;  111			
;  112			
;  113				gfx_SetColor(0xFF);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  114				
;  115			
;  116			if (player == 1) {
	LD	BC,1
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_2
;  117				gfx_TransparentSprite(redcursor, cursorx, cursory);
	LD	BC,(_cursory)
	PUSH	BC
	LD	BC,(_cursorx)
	PUSH	BC
	LD	BC,_redcursor_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  118			}
L_2:
;  119			
;  120			if (player == 2) {
	LD	BC,2
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_3
;  121				gfx_TransparentSprite(bluecursor, cursorx, cursory);
	LD	BC,(_cursory)
	PUSH	BC
	LD	BC,(_cursorx)
	PUSH	BC
	LD	BC,_bluecursor_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  122			}
L_3:
;  123			kb_Scan();
	CALL	_kb_Scan
;  124			
;  125			if (previous_cursorx != cursorx)  {
	LD	BC,(_cursorx)
	LD	HL,(_previous_cursorx)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_6
;  126				gfx_Rectangle( previous_cursorx, previous_cursory, 49, 49);
	LD	BC,49
	PUSH	BC
	PUSH	BC
	LD	BC,(_previous_cursory)
	PUSH	BC
	LD	BC,(_previous_cursorx)
	PUSH	BC
	CALL	_gfx_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  127			}
L_6:
;  128			if (previous_cursory != cursory) {
	LD	BC,(_cursory)
	LD	HL,(_previous_cursory)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_7
;  129				gfx_Rectangle( previous_cursorx, previous_cursory, 49, 49);
	LD	BC,49
	PUSH	BC
	PUSH	BC
	LD	BC,(_previous_cursory)
	PUSH	BC
	LD	BC,(_previous_cursorx)
	PUSH	BC
	CALL	_gfx_Rectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  130			}
L_7:
;  131			
;  132				previous_cursorx = cursorx;
	LD	BC,(_cursorx)
	LD	(_previous_cursorx),BC
;  133				previous_cursory = cursory;
	LD	BC,(_cursory)
	LD	(_previous_cursory),BC
;  134			
;  135			/* for debug, 1 and 2 changes things
;  136			if (kb_Data[3] & kb_1) {
;  137				player = 1;
;  138			}
;  139			if (kb_Data[4] & kb_2) {
;  140				player = 2;
;  141			}
;  142			*/
;  143			
;  144				key = kb_Data[7];
	LD	A,(16056350)
	LD	(IX+-40),A
;  145				if (key & kb_Down) {
	AND	A,1
	JR	Z,L_14
;  146						cursory = (cursory + cursor_step);
	LD	BC,(_cursor_step)
	LD	HL,(_cursory)
	ADD	HL,BC
	LD	(_cursory),HL
;  147						keywait();
	CALL	_keywait
;  148				}
;  149				else if (key & kb_Up) {
	JR	L_16
L_14:
	LD	A,(IX+-40)
	AND	A,8
	JR	Z,L_12
;  150						cursory = (cursory - cursor_step);
	LD	HL,(_cursory)
	LD	BC,(_cursor_step)
	OR	A,A
	SBC	HL,BC
	LD	(_cursory),HL
;  151						keywait();
	CALL	_keywait
;  152				}
;  153				else if (key & kb_Left) {
	JR	L_16
L_12:
	LD	A,(IX+-40)
	AND	A,2
	JR	Z,L_10
;  154						cursorx = (cursorx - cursor_step);
	LD	HL,(_cursorx)
	LD	BC,(_cursor_step)
	OR	A,A
	SBC	HL,BC
	LD	(_cursorx),HL
;  155						keywait();
	CALL	_keywait
;  156				}
;  157				else if (key & kb_Right) {
	JR	L_16
L_10:
	LD	A,(IX+-40)
	AND	A,4
	JR	Z,L_16
;  158						cursorx = (cursorx + cursor_step);
	LD	BC,(_cursor_step)
	LD	HL,(_cursorx)
	ADD	HL,BC
	LD	(_cursorx),HL
;  159						keywait();
	CALL	_keywait
;  160				}
L_16:
;  161				
;  162				/*bounds checking*/
;  163				if (cursorx<86) {
	LD	BC,86
	LD	HL,(_cursorx)
	OR	A,A
	SBC	HL,BC
	JP	P,L_18
;  164					cursorx = 186;
	LD	BC,186
	LD	(_cursorx),BC
;  165				}
L_18:
;  166				if (cursorx>186) {
	LD	BC,(_cursorx)
	LD	HL,186
	OR	A,A
	SBC	HL,BC
	JP	P,L__74
	JP	PE,L_20
	JR	L__75
L__74:
	JP	PO,L_20
L__75:
;  167					cursorx = 86;
	LD	BC,86
	LD	(_cursorx),BC
;  168				}
L_20:
;  169				if (cursory<51) {
	LD	BC,51
	LD	HL,(_cursory)
	OR	A,A
	SBC	HL,BC
	JP	P,L__76
	JP	PE,L_22
	JR	L__77
L__76:
	JP	PO,L_22
L__77:
;  170					cursory = 151;
	LD	BC,151
	LD	(_cursory),BC
;  171				}
L_22:
;  172				if (cursory>151) {
	LD	BC,(_cursory)
	LD	HL,151
	OR	A,A
	SBC	HL,BC
	JP	P,L__78
	JP	PE,L_23
	JR	L__79
L__78:
	JP	PO,L_23
L__79:
;  173					cursory = 51;
	LD	BC,51
	LD	(_cursory),BC
;  174				}
L_23:
;  175				
;  176				
;  177						/*gets value used to search coord array*/
;  178							value = ((cursorx*320)+cursory);
	LD	HL,(_cursorx)
	LD	BC,(_cursorx)
	LD	DE,(_cursory)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	(_value),HL
;  179						/*gets element of board array from value*/
;  180							for (element=0; value!=coord[element]; element++);
	LD	BC,0
	LD	(_element),BC
	JR	L_27
L_25:
	LD	BC,(_element)
	INC	BC
	LD	(_element),BC
L_27:
	LD	HL,(_element)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_element)
	SBC	HL,BC
	LD	BC,_coord
	ADD	HL,BC
	LD	HL,(HL)
	OR	A,A
	LD	BC,(_value)
	SBC	HL,BC
	JR	NZ,L_25
;  181							
;  182				/*Array debug stuff
;  183						gfx_SetTextXY(2,20);
;  184						gfx_PrintInt(element,1);
;  185						gfx_SetTextXY(2,30);
;  186						gfx_PrintInt(board[element],1);
;  187				*/
;  188					
;  189				
;  190				/*if 2nd, update x or o coords and draw x or o*/
;  191				if (kb_Data[1] & kb_2nd) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_99
;  192						if (player == 1) {
	LD	BC,1
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_30
;  193							xx = cursorx;
	LD	BC,(_cursorx)
	LD	(_xx),BC
;  194							xy = cursory;
	LD	BC,(_cursory)
	LD	(_xy),BC
;  195						}
L_30:
;  196						if (player == 2) {
	LD	BC,2
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_35
;  197							ox = cursorx;
	LD	BC,(_cursorx)
	LD	(_ox),BC
;  198							oy = cursory;
	LD	BC,(_cursory)
	LD	(_oy),BC
;  199						}
L_35:
;  200							
;  201					if (gfx_GetPixel((cursorx+10),(cursory+10)) == 255) {
	LD	A,(_cursory)
	ADD	A,10
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(_cursorx)
	LEA	BC,IY+10
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,255
	SBC	HL,BC
	JR	NZ,L_36
;  202						if (player == 1) {
	LD	BC,1
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_33
;  203							gfx_TransparentSprite(fancyredx, xx, xy);
	LD	BC,(_xy)
	PUSH	BC
	LD	BC,(_xx)
	PUSH	BC
	LD	BC,_fancyredx_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  204							board[element] = 1;
	LD	BC,_board
	LD	HL,(_element)
	ADD	HL,BC
	LD	(HL),1
;  205							player = 2;
	LD	BC,2
	LD	(_player),BC
;  206						}
;  207						else if (player == 2) {
	JR	L_36
L_33:
	LD	BC,2
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_36
;  208							gfx_TransparentSprite(fancyblueo, ox, oy);
	LD	BC,(_oy)
	PUSH	BC
	LD	BC,(_ox)
	PUSH	BC
	LD	BC,_fancyblueo_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  209							board[element] = 2;
	LD	BC,_board
	LD	HL,(_element)
	ADD	HL,BC
	LD	(HL),2
;  210							player = 1;
	LD	BC,1
	LD	(_player),BC
;  211						}	
;  212					}
L_36:
;  213					keywait();
	CALL	_keywait
;  214					
;  215					//gfx_PrintStringXY(board,2,20);
;  216					
;  217					/*maybe do this before testing for wins
;  218					
;  219					for (test_element = 0; test_element = 9; test_element++) {
;  220						if ((board[test_element] == 1) || (board[test_element] == 2)){
;  221							test_result++;
;  222						}
;  223					}
;  224					
;  225					//Testy debug
;  226					gfx_FillRectangle(2,20,50,50);
;  227					gfx_SetTextXY(2,20);
;  228					gfx_PrintInt(test_result,1);
;  229					*/
;  230				
;  231				//do win checking-ness
;  232				
;  233				if ((board[0]+board[1]+board[2]+board[3]+board[4]+board[5]+board[6]+board[7]+board[8])>= 13) {
	LD	IY,_board
	LEA	BC,IY+3
	LEA	DE,IY+6
	LEA	HL,IY+4
	LD	(IX+-104),BC	; spill
	LEA	BC,IY+7
	LD	(IX+-107),BC	; spill
	LD	BC,(IX+-104)	; unspill
	LD	(IX+-24),BC
	LD	BC,_board
	INC	BC
	LD	(IX+-12),DE
	LEA	DE,IY+2
	LD	(IX+-30),BC
	LD	(IX+-6),HL
	LEA	HL,IY+5
	LD	BC,(IX+-107)	; unspill
	LD	(IX+-9),BC
	LD	(IX+-15),DE
	LEA	IY,IY+8
	LD	(IX+-21),HL
	LD	(IX+-3),IY
	LD	BC,(IX+-24)
	LD	(IX+-77),BC
	LD	BC,(IX+-6)
	LD	(IX+-74),BC
	LD	BC,(IX+-21)
	LD	(IX+-80),BC
	LD	BC,(IX+-12)
	LD	(IX+-47),BC
	LD	BC,(IX+-9)
	LD	(IX+-59),BC
	LD	BC,(IX+-3)
	LD	(IX+-50),BC
	LD	BC,(IX+-6)
	LD	(IX+-43),BC
	LD	BC,(IX+-3)
	LD	(IX+-27),BC
	LD	BC,(IX+-6)
	LD	(IX+-18),BC
	LD	A,(_board)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+-30)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,(IX+-15)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,(IX+-24)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,(IX+-6)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,(IX+-21)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,(IX+-12)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,(IX+-9)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	IY,(IX+-3)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	OR	A,A
	LD	BC,13
	SBC	HL,BC
	JP	M,L_44
;  234				winner = 3;
	LD	BC,3
	LD	(_winner),BC
;  235				}
L_44:
;  236				
;  237				if (board[0] != 0) { //first column
	LD	A,(_board)
	OR	A,A
	JR	Z,L_51
;  238					if (board[3] == board[0]) {
	LD	BC,(IX+-24)
	LD	(IX+-77),BC
	LD	HL,(IX+-24)
	LD	A,(_board)
	CP	A,(HL)
	JR	NZ,L_51
;  239						if (board[6] == board[3]) {
	LD	BC,(IX+-24)
	LD	(IX+-77),BC
	LD	BC,(IX+-12)
	LD	(IX+-47),BC
	LD	HL,(IX+-12)
	LD	A,(HL)
	LD	HL,(IX+-24)
	CP	A,(HL)
	JR	NZ,L_51
;  240							if (board[6] == 1) {
	LD	BC,(IX+-12)
	LD	(IX+-47),BC
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_40
;  241								winner = 1;
	LD	(_winner),BC
;  242							}
;  243							else if (board[6] == 2) {
	JR	L_51
L_40:
	LD	BC,(IX+-12)
	LD	(IX+-47),BC
	LD	HL,(IX+-12)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_51
;  244								winner = 2;
	LD	(_winner),BC
;  245							}
;  246						}
;  247					}
;  248				}
L_51:
;  249				
;  250				if (board[1] != 0) { //second column
	LD	BC,(IX+-30)
	LD	(IX+-101),BC
	LD	HL,(IX+-30)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_58
;  251					if (board[4] == board[1]) {
	LD	BC,(IX+-30)
	LD	(IX+-101),BC
	LD	BC,(IX+-6)
	LD	(IX+-74),BC
	LD	BC,(IX+-6)
	LD	(IX+-43),BC
	LD	BC,(IX+-6)
	LD	(IX+-18),BC
	LD	HL,(IX+-6)
	LD	A,(HL)
	LD	HL,(IX+-30)
	CP	A,(HL)
	JR	NZ,L_58
;  252						if (board[7] == board[4]) {
	LD	BC,(IX+-6)
	LD	(IX+-74),BC
	LD	BC,(IX+-9)
	LD	(IX+-59),BC
	LD	BC,(IX+-6)
	LD	(IX+-43),BC
	LD	BC,(IX+-6)
	LD	(IX+-18),BC
	LD	HL,(IX+-9)
	LD	A,(HL)
	LD	HL,(IX+-6)
	CP	A,(HL)
	JR	NZ,L_58
;  253							if (board[7] == 1) {
	LD	BC,(IX+-9)
	LD	(IX+-59),BC
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_47
;  254								winner = 1;
	LD	(_winner),BC
;  255							}
;  256							else if (board[7] == 2) {
	JR	L_58
L_47:
	LD	BC,(IX+-9)
	LD	(IX+-59),BC
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_58
;  257								winner = 2;
	LD	(_winner),BC
;  258							}
;  259						}
;  260					}
;  261				}
L_58:
;  262				
;  263				if (board[2] != 0) { //third column
	LD	BC,(IX+-15)
	LD	(IX+-89),BC
	LD	BC,(IX+-15)
	LD	(IX+-71),BC
	LD	HL,(IX+-15)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L__39
	LD	A,1
	JR	L__40
L__39:
	XOR	A,A
L__40:
	LD	(IX+-44),A
	OR	A,A
	JR	NZ,L_65
;  264					if (board[5] == board[2]) {
	LD	BC,(IX+-15)
	LD	(IX+-89),BC
	LD	BC,(IX+-21)
	LD	(IX+-80),BC
	LD	BC,(IX+-15)
	LD	(IX+-71),BC
	LD	HL,(IX+-21)
	LD	A,(HL)
	LD	HL,(IX+-15)
	CP	A,(HL)
	JR	NZ,L_65
;  265						if (board[8] == board[5]) {
	LD	BC,(IX+-21)
	LD	(IX+-80),BC
	LD	BC,(IX+-3)
	LD	(IX+-50),BC
	LD	BC,(IX+-3)
	LD	(IX+-27),BC
	LD	HL,(IX+-3)
	LD	A,(HL)
	LD	HL,(IX+-21)
	CP	A,(HL)
	JR	NZ,L_65
;  266							if (board[8] == 1) {
	LD	BC,(IX+-3)
	LD	(IX+-50),BC
	LD	BC,(IX+-3)
	LD	(IX+-27),BC
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_54
;  267								winner = 1;
	LD	(_winner),BC
;  268							}
;  269							else if (board[8] == 2) {
	JR	L_65
L_54:
	LD	BC,(IX+-3)
	LD	(IX+-50),BC
	LD	BC,(IX+-3)
	LD	(IX+-27),BC
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_65
;  270								winner = 2;
	LD	(_winner),BC
;  271							}
;  272						}
;  273					}
;  274				}
L_65:
;  275				
;  276				if (board[0] != 0) { //first row
	LD	A,(_board)
	OR	A,A
	JR	Z,L_72
;  277					if (board[1] == board[0]) {
	LD	BC,(IX+-101)
	LD	(IX+-92),BC
	LD	HL,BC
	LD	A,(_board)
	CP	A,(HL)
	JR	NZ,L_72
;  278						if (board[1] == board[2]) {
	LD	BC,(IX+-89)
	LD	(IX+-33),BC
	LD	(IX+-71),BC
	LD	HL,(IX+-92)
	LD	A,(HL)
	LD	HL,(IX+-33)
	CP	A,(HL)
	JR	NZ,L_72
;  279							if (board[2] == 1) {
	LD	HL,(IX+-33)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_61
;  280								winner = 1;
	LD	(_winner),BC
;  281							}
L_61:
;  282							if (board[2] == 2) {
	LD	BC,(IX+-33)
	LD	(IX+-71),BC
	LD	HL,(IX+-33)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_72
;  283								winner = 2;
	LD	(_winner),BC
;  284							}
;  285						}
;  286					}
;  287				}
L_72:
;  288				
;  289				if (board[3] != 0) { //second row
	LD	BC,(IX+-77)
	LD	(IX+-86),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_79
;  290					if (board[4] == board[3]) {
	LD	BC,(IX+-74)
	LD	(IX+-36),BC
	LD	(IX+-43),BC
	LD	BC,(IX+-36)
	LD	(IX+-18),BC
	LD	HL,(IX+-36)
	LD	A,(HL)
	LD	HL,(IX+-86)
	CP	A,(HL)
	JR	NZ,L_79
;  291						if (board[5] == board[4]) {
	LD	BC,(IX+-80)
	LD	(IX+-53),BC
	LD	BC,(IX+-36)
	LD	(IX+-43),BC
	LD	BC,(IX+-36)
	LD	(IX+-18),BC
	LD	HL,(IX+-53)
	LD	A,(HL)
	LD	HL,(IX+-36)
	CP	A,(HL)
	JR	NZ,L_79
;  292							if (board[5] == 1) {
	LD	HL,(IX+-53)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_68
;  293								winner = 1;
	LD	(_winner),BC
;  294							}
L_68:
;  295							if (board[5] == 2) {
	LD	HL,(IX+-53)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_79
;  296								winner = 2;
	LD	(_winner),BC
;  297							}
;  298						}
;  299					}
;  300				}
L_79:
;  301				
;  302				if (board[6] != 0) { //third row
	LD	BC,(IX+-47)
	LD	(IX+-56),BC
	LD	(IX+-98),BC
	LD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	Z,L_86
;  303					if (board[7] == board[6]) {
	LD	BC,(IX+-59)
	LD	(IX+-83),BC
	LD	BC,(IX+-56)
	LD	(IX+-98),BC
	LD	HL,(IX+-83)
	LD	A,(HL)
	LD	HL,(IX+-56)
	CP	A,(HL)
	JR	NZ,L_86
;  304						if (board[8] == board[7]) {
	LD	BC,(IX+-50)
	LD	(IX+-39),BC
	LD	(IX+-27),BC
	LD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-83)
	CP	A,(HL)
	JR	NZ,L_86
;  305							if (board[8] == 1) {
	LD	HL,(IX+-39)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_75
;  306								winner = 1;
	LD	(_winner),BC
;  307							}
L_75:
;  308							if (board[8] == 2) {
	LD	BC,(IX+-39)
	LD	(IX+-27),BC
	LD	HL,(IX+-39)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_86
;  309								winner = 2;
	LD	(_winner),BC
;  310							}
;  311						}
;  312					}
;  313				}
L_86:
;  314				
;  315				if (board[0] != 0) { //top left->bottom right diagonal
	LD	A,(_board)
	OR	A,A
	JR	Z,L_93
;  316					if (board[4] == board[0]) {
	LD	BC,(IX+-43)
	LD	(IX+-62),BC
	LD	(IX+-18),BC
	LD	HL,BC
	LD	A,(_board)
	CP	A,(HL)
	JR	NZ,L_93
;  317						if (board[8] == board[4]) {
	LD	BC,(IX+-27)
	LD	(IX+-65),BC
	LD	BC,(IX+-62)
	LD	(IX+-18),BC
	LD	HL,(IX+-65)
	LD	A,(HL)
	LD	HL,(IX+-62)
	CP	A,(HL)
	JR	NZ,L_93
;  318							if (board[8] == 1) {
	LD	HL,(IX+-65)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_82
;  319								winner = 1;
	LD	(_winner),BC
;  320							}
L_82:
;  321							if (board[8] == 2) {
	LD	HL,(IX+-65)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_93
;  322								winner = 2;
	LD	(_winner),BC
;  323							}
;  324						}
;  325					}
;  326				}
L_93:
;  327				
;  328				if (board[2] != 0) { //top right->bottom left diagonal
	LD	A,(IX+-44)
	OR	A,A
	JR	NZ,L_99
;  329					if (board[4] == board[2]) {
	LD	BC,(IX+-18)
	LD	(IX+-95),BC
	LD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-71)
	CP	A,(HL)
	JR	NZ,L_99
;  330						if (board[6] == board[4]) {
	LD	BC,(IX+-98)
	LD	(IX+-68),BC
	LD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-95)
	CP	A,(HL)
	JR	NZ,L_99
;  331							if (board[6] == 1) {
	LD	HL,(IX+-68)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_89
;  332								winner = 1;
	LD	(_winner),BC
;  333							}
L_89:
;  334							if (board[6] == 2) {
	LD	HL,(IX+-68)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_99
;  335								winner = 2;
	LD	(_winner),BC
;  336							}
;  337						}
;  338					}
;  339				}
;  340				
;  341			}
L_99:
;  342			
;  343			if (winner != 0) {
	LD	BC,0
	LD	HL,(_winner)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_101
;  344					winscreen();
	CALL	_winscreen
;  345						if (clear == 1) {
	LD	BC,1
	LD	HL,(_clear)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_102
;  346							break;
;  347						}
;  348					resetvars();
	CALL	_resetvars
;  349					longjmp(buf,1);
	LD	BC,1
	PUSH	BC
	LD	BC,_buf
	PUSH	BC
	CALL	_longjmp
	POP	BC
	POP	BC
;  350				}
;  351			
;  352			
;  353			
;  354		} while (!(kb_Data[6] & kb_Clear));
L_101:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_100
L_102:
;  355		
;  356		gfx_End();
	CALL	_gfx_End
;  357	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_longjmp                            IMPORT  -----   function
;_resetvars                          IMPORT  -----   function
;_clear                              STATIC      3   variable
;_winscreen                          IMPORT  -----   function
;_winner                             STATIC      3   variable
;_fancyblueo_data                    IMPORT   2502   variable
;_board                              STATIC      9   variable
;_fancyredx_data                     IMPORT   2502   variable
;_gfx_GetPixel                       IMPORT  -----   function
;_oy                                 STATIC      3   variable
;_ox                                 STATIC      3   variable
;_xy                                 STATIC      3   variable
;_xx                                 STATIC      3   variable
;_coord                              STATIC     27   variable
;_element                            STATIC      3   variable
;_value                              STATIC      3   variable
;_keywait                            IMPORT  -----   function
;_cursor_step                        STATIC      3   variable
;_previous_cursory                   STATIC      3   variable
;_gfx_Rectangle                      IMPORT  -----   function
;_previous_cursorx                   STATIC      3   variable
;_kb_Scan                            IMPORT  -----   function
;_bluecursor_data                    IMPORT   2403   variable
;_redcursor_data                     IMPORT   2403   variable
;_cursorx                            STATIC      3   variable
;_cursory                            STATIC      3   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_player                             STATIC      3   variable
;_gfx_Line                           IMPORT  -----   function
;_version                            STATIC      3   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_tictacgfx_pal                      IMPORT    512   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_buf                                STATIC     12   variable
;_setjmp                             IMPORT  -----   function
;G_19                                IX-101      3   variable
;G_47                                 IX-98      3   variable
;G_46                                 IX-95      3   variable
;G_20                                 IX-92      3   variable
;G_21                                 IX-89      3   variable
;G_25                                 IX-86      3   variable
;G_34                                 IX-83      3   variable
;G_28                                 IX-80      3   variable
;G_24                                 IX-77      3   variable
;G_26                                 IX-74      3   variable
;G_44                                 IX-71      3   variable
;G_48                                 IX-68      3   variable
;G_41                                 IX-65      3   variable
;G_39                                 IX-62      3   variable
;G_33                                 IX-59      3   variable
;G_32                                 IX-56      3   variable
;G_29                                 IX-53      3   variable
;G_35                                 IX-50      3   variable
;G_31                                 IX-47      3   variable
;G_43                                 IX-44      1   variable
;G_38                                 IX-43      3   variable
;key                                  IX-40      1   variable
;G_36                                 IX-39      3   variable
;G_27                                 IX-36      3   variable
;G_22                                 IX-33      3   variable
;G_5                                  IX-30      3   variable
;G_40                                 IX-27      3   variable
;G_0                                  IX-24      3   variable
;G_14                                 IX-21      3   variable
;G_45                                 IX-18      3   variable
;G_12                                 IX-15      3   variable
;G_2                                  IX-12      3   variable
;G_9                                   IX-9      3   variable
;G_7                                   IX-6      3   variable
;G_16                                  IX-3      3   variable


; Stack Frame Size: 113 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__4:
	DB	"< ^ v > = Move"
	DB	0
L__5:
	DB	"[2nd] = Place Piece"
	DB	0
L__6:
	DB	"[Clear] = Quit"
	DB	0
L__7:
	DB	"By: Pieman7373 2018"
	DB	0
	SEGMENT CODE
;  358	
;  359	
;  360	
;  361	/* Put other functions here */
;  362	void keywait() { while (kb_AnyKey()); }
_keywait:
L_105:
	CALL	_kb_AnyKey
	OR	A,A
	JR	NZ,L_105
	RET	


;**************************** _keywait ***************************
;Name                         Addr/Register   Size   Type
;_kb_AnyKey                          IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  363	
;  364	void resetvars() {
_resetvars:
	LD	HL,-15
	CALL	__frameset
;  365		xx = 10;
	LD	BC,10
	LD	(_xx),BC
;  366		xy = 20;
	LD	BC,20
	LD	(_xy),BC
;  367		ox = 40;
	LD	BC,40
	LD	(_ox),BC
;  368		oy = 40;
	LD	(_oy),BC
;  369		cursorx = 86;
	LD	BC,86
	LD	(_cursorx),BC
;  370		cursory = 51;
	LD	BC,51
	LD	(_cursory),BC
;  371		player = 1;
	LD	BC,1
	LD	(_player),BC
;  372		element = 0;
	LD	BC,0
;  373		test_element = 0;
;  374		test_result = 0;
;  375		winner = 0;
;  376		clear = 0;
;  377		board[0]=0;
;  378		board[1]=0;
;  379		board[2]=0;
	LD	IY,_board
	LEA	IY,IY+2
	LD	(IX+-12),IY	; spill
	LD	(_element),BC
	LD	(_test_element),BC
;  380		board[3]=0;
	LD	IY,_board
	LD	(_test_result),BC
	LEA	IY,IY+3
	LD	(IX+-9),IY	; spill
	LD	(_winner),BC
;  381		board[4]=0;
	LD	IY,_board
	LD	(_clear),BC
	LEA	IY,IY+4
	LD	(IX+-6),IY	; spill
	XOR	A,A
	LD	HL,_board
	INC	HL
	LD	(_board),A
	LD	(HL),0
;  382		board[5]=0;
	LD	HL,_board+5
	LD	IY,(IX+-12)	; unspill
	LD	(IY),0
;  383		board[6]=0;
	LD	IY,_board
	LD	(IX+-3),IY	; spill
	LD	IY,(IX+-9)	; unspill
	LD	(IY),0
	LD	IY,(IX+-3)	; unspill
	LEA	IY,IY+6
	LD	(IX+-15),IY	; spill
	LD	IY,(IX+-6)	; unspill
	LD	(IY),0
	LD	(HL),0
;  384		board[7]=0;
	LD	HL,_board+7
	LD	IY,(IX+-15)	; unspill
	LD	(IY),0
	LD	(HL),0
;  385		board[8]=0;
	LD	HL,_board+8
	LD	(HL),0
;  386		return;
;  387	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _resetvars ***************************
;Name                         Addr/Register   Size   Type
;_board                              STATIC      9   variable
;_clear                              STATIC      3   variable
;_winner                             STATIC      3   variable
;_test_result                        STATIC      3   variable
;_test_element                       STATIC      3   variable
;_element                            STATIC      3   variable
;_player                             STATIC      3   variable
;_cursory                            STATIC      3   variable
;_cursorx                            STATIC      3   variable
;_oy                                 STATIC      3   variable
;_ox                                 STATIC      3   variable
;_xy                                 STATIC      3   variable
;_xx                                 STATIC      3   variable


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


;  388	
;  389	void winscreen() {
_winscreen:
;  390		
;  391			//gfx_FillScreen(0x67);
;  392	
;  393			
;  394		do {
L_127:
;  395			
;  396			gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  397			gfx_SetTextFGColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  398			gfx_PrintStringXY("Press [Enter] to continue, and then",43,210);
	LD	BC,210
	PUSH	BC
	LD	BC,43
	PUSH	BC
	LD	BC,L__84
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  399			gfx_PrintStringXY("[Clear] to quit, or keep playing",53,220);
	LD	BC,220
	PUSH	BC
	LD	BC,53
	PUSH	BC
	LD	BC,L__85
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  400			gfx_SetTextFGColor(0x67);
	LD	BC,103
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  401			gfx_SetTextBGColor(0xFF);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  402			gfx_SetTextScale(4,4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  403			
;  404			kb_Scan();
	CALL	_kb_Scan
;  405			if (winner == 1) {
	LD	BC,1
	LD	HL,(_winner)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_122
;  406					effectx = randInt(0,320);
	CALL	_random
	LD	BC,321
	CALL	__iremu
	LD	(_effectx),HL
;  407					effecty = randInt(0,240);
	CALL	_random
	LD	BC,241
	CALL	__iremu
	LD	(_effecty),HL
;  408						if (randInt(0,1)) {
	CALL	_random
	LD	A,L
	AND	A,1
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	Z,L_112
;  409							//display firework 1
;  410							gfx_ScaledTransparentSprite_NoClip(red_firework_1_16x16,effectx,effecty,2,2);
	LD	BC,2
	PUSH	BC
	LD	A,(_effecty)
	LD	C,A
	LD	DE,2
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	BC,(_effectx)
	PUSH	BC
	LD	BC,_red_firework_1_16x16_data
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  411						} 
;  412						else if (randInt(0,1)) {
	JR	L_113
L_112:
	CALL	_random
	LD	A,L
	AND	A,1
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	Z,L_110
;  413							//display spiral sprite 1
;  414							gfx_TransparentSprite(red_swirl,effectx,effecty);
	LD	BC,(_effecty)
	PUSH	BC
	LD	BC,(_effectx)
	PUSH	BC
	LD	BC,_red_swirl_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  415						}
;  416						else if (randInt(0,1)) {
	JR	L_113
L_110:
	CALL	_random
	LD	A,L
	AND	A,1
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	Z,L_113
;  417							//display firework 2
;  418							gfx_ScaledTransparentSprite_NoClip(red_firework_2_16x16,effectx, effecty,2,2);
	LD	BC,2
	PUSH	BC
	LD	A,(_effecty)
	LD	C,A
	LD	DE,2
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	BC,(_effectx)
	PUSH	BC
	LD	BC,_red_firework_2_16x16_data
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  419						}
L_113:
;  420						
;  421				gfx_PrintStringXY(xwins,45,105);
	LD	BC,105
	PUSH	BC
	LD	BC,45
	PUSH	BC
	LD	BC,(_xwins)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  422				gfx_SetTextBGColor(0xE0);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  423			}
L_122:
;  424			if (winner == 2) {
	LD	BC,2
	LD	HL,(_winner)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_124
;  425					effectx = randInt(0,320);
	CALL	_random
	LD	BC,321
	CALL	__iremu
	LD	(_effectx),HL
;  426					effecty = randInt(0,240);
	CALL	_random
	LD	BC,241
	CALL	__iremu
	LD	(_effecty),HL
;  427						if (randInt(0,1)) {
	CALL	_random
	LD	A,L
	AND	A,1
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	Z,L_119
;  428							//display firework 1
;  429							gfx_ScaledTransparentSprite_NoClip(blue_firework_1_16x16,effectx,effecty,2,2);
	LD	BC,2
	PUSH	BC
	LD	A,(_effecty)
	LD	C,A
	LD	DE,2
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	BC,(_effectx)
	PUSH	BC
	LD	BC,_blue_firework_1_16x16_data
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  430						} 
;  431						else if (randInt(0,1)) {
	JR	L_120
L_119:
	CALL	_random
	LD	A,L
	AND	A,1
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	Z,L_117
;  432							//display spiral sprite 1
;  433							gfx_TransparentSprite(blue_swirl,effectx,effecty);
	LD	BC,(_effecty)
	PUSH	BC
	LD	BC,(_effectx)
	PUSH	BC
	LD	BC,_blue_swirl_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  434						}
;  435						else if (randInt(0,1)) {
	JR	L_120
L_117:
	CALL	_random
	LD	A,L
	AND	A,1
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	Z,L_120
;  436							//display firework 2
;  437							gfx_ScaledTransparentSprite_NoClip(blue_firework_2_16x16,effectx, effecty,2,2);
	LD	BC,2
	PUSH	BC
	LD	A,(_effecty)
	LD	C,A
	LD	DE,2
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	BC,(_effectx)
	PUSH	BC
	LD	BC,_blue_firework_2_16x16_data
	PUSH	BC
	CALL	_gfx_ScaledTransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  438						}
L_120:
;  439						
;  440				gfx_PrintStringXY(owins,45,105);
	LD	BC,105
	PUSH	BC
	LD	BC,45
	PUSH	BC
	LD	BC,(_owins)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  441				gfx_SetTextBGColor(0x19);
	LD	BC,25
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  442			}
L_124:
;  443			if (winner == 3) {
	LD	BC,3
	LD	HL,(_winner)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_126
;  444				gfx_SetTextBGColor(0x74);
	LD	BC,116
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  445				//gfx_PrintStringXY(xwins,45,105);
;  446				//gfx_PrintStringXY(owins,45,105);	
;  447				gfx_PrintStringXY(catsgame,15,105);
	LD	BC,105
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,(_catsgame)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  448			}
L_126:
;  449			
;  450			if (kb_Data[6] & kb_Clear) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_128
;  451				clear = 1;
	LD	BC,1
	LD	(_clear),BC
;  452				break;
	JR	L_129
;  453			}
;  454		
;  455		} while (!(kb_Data[6] & kb_Enter));
L_128:
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_127
L_129:
;  456		return;
;  457	}
	RET	


;**************************** _winscreen ***************************
;Name                         Addr/Register   Size   Type
;_clear                              STATIC      3   variable
;_catsgame                           STATIC      3   variable
;_owins                              STATIC      3   variable
;_blue_firework_2_16x16_data         IMPORT    258   variable
;_blue_swirl_data                    IMPORT    258   variable
;_blue_firework_1_16x16_data         IMPORT    258   variable
;_xwins                              STATIC      3   variable
;_red_firework_2_16x16_data          IMPORT    258   variable
;_red_swirl_data                     IMPORT    258   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_red_firework_1_16x16_data          IMPORT    258   variable
;_gfx_ScaledTransparentSprite_NoClip      IMPORT  -----   function
;_effecty                            STATIC      3   variable
;_effectx                            STATIC      3   variable
;_random                             IMPORT  -----   function
;_winner                             STATIC      3   variable
;_kb_Scan                            IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__84:
	DB	"Press [Enter] to continue, and then"
	DB	0
L__85:
	DB	"[Clear] to quit, or keep playing"
	DB	0
	XREF _tictacgfx_pal:ROM
	XREF _red_swirl_data:ROM
	XREF _red_firework_2_16x16_data:ROM
	XREF _red_firework_1_16x16_data:ROM
	XREF _blue_swirl_data:ROM
	XREF _blue_firework_2_16x16_data:ROM
	XREF _blue_firework_1_16x16_data:ROM
	XREF _bluecursor_data:ROM
	XREF _redcursor_data:ROM
	XREF _fancyblueo_data:ROM
	XREF _fancyredx_data:ROM
	XREF _kb_AnyKey:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_ScaledTransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Rectangle:ROM
	XREF _gfx_Line:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _longjmp:ROM
	XREF _setjmp:ROM
	XREF _random:ROM
	XREF __iremu:ROM
	XREF __frameset:ROM
	XDEF _winscreen
	XDEF _resetvars
	XDEF _keywait
	XDEF _main
	XDEF _coord
	XDEF _board
	XDEF _catsgame
	XDEF _owins
	XDEF _xwins
	XDEF _winner
	XDEF _version
	XDEF _value
	XDEF _effecty
	XDEF _effectx
	XDEF _clear
	XDEF _test_result
	XDEF _test_element
	XDEF _element
	XDEF _player
	XDEF _cursor_step
	XDEF _previous_cursory
	XDEF _cursory
	XDEF _previous_cursorx
	XDEF _cursorx
	XDEF _oy
	XDEF _ox
	XDEF _xy
	XDEF _xx
	END
